generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENTRA

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  classId String?
  class   Class?  @relation(fields: [classId], references: [id])

  isAdmin Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// RESOURCES
model Room {
  id            String             @id @default(cuid())
  name          String             @unique
  short         String             @unique
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  substitutions Substitution[]
  fromRoomSubs  RoomSubstitution[] @relation("FromRoom")
  toRoomSubs    RoomSubstitution[] @relation("ToRoom")
  Lesson        Lesson[]
}

model Subject {
  id    String @id @default(cuid())
  name  String @unique
  short String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  substitutions Substitution[]
  Lesson        Lesson[]
}

model Teacher {
  id    String @id @default(cuid())
  name  String
  short String
  email String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  substitutions Substitution[]
  missingSubs   Substitution[] @relation("MissingTeacher")
  Lesson        Lesson[]
}

model Class {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students      User[]
  substitutions Substitution[]
  roomSubs      RoomSubstitution[]
  Lesson        Lesson[]
}

// E-KRETA STUFF
enum WeekType {
  A
  B
  AB
  X
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

// DATA
model Announcement {
  id      String   @id @default(cuid())
  title   String
  content String
  date    DateTime @default(now()) @db.Date

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Substitution {
  id   String   @id @default(cuid())
  date DateTime @default(now()) @db.Date

  missingTeacher   Teacher @relation("MissingTeacher", fields: [missingTeacherId], references: [id])
  missingTeacherId String

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  room   Room   @relation(fields: [roomId], references: [id])
  roomId String

  class   Class  @relation(fields: [classId], references: [id])
  classId String

  classGroup String?

  consolidated Boolean

  lesson Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoomSubstitution {
  id   String   @id @default(cuid())
  date DateTime @default(now()) @db.Date

  fromRoom   Room   @relation("FromRoom", fields: [fromRoomId], references: [id])
  fromRoomId String

  toRoom   Room   @relation("ToRoom", fields: [toRoomId], references: [id])
  toRoomId String

  class   Class  @relation(fields: [classId], references: [id])
  classId String

  lesson Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id String @id @default(cuid())

  weekType WeekType
  day      Day
  lesson   Int

  group String?

  class   Class?  @relation(fields: [classId], references: [id])
  classId String?

  subject   Subject @relation(fields: [subjectId], references: [id])
  subjectId String

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String

  room   Room   @relation(fields: [roomId], references: [id])
  roomId String
}
